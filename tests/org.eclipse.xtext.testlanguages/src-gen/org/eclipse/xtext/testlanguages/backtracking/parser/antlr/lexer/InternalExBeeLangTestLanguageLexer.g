
/*
* generated by Xtext
*/
lexer grammar InternalExBeeLangTestLanguageLexer;


@header {
package org.eclipse.xtext.testlanguages.backtracking.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




KEYWORD_64 : 'requires-max';

KEYWORD_65 : 'requires-min';

KEYWORD_62 : 'implements';

KEYWORD_63 : 'properties';

KEYWORD_59 : 'function';

KEYWORD_60 : 'provides';

KEYWORD_61 : 'requires';

KEYWORD_56 : 'builder';

KEYWORD_57 : 'context';

KEYWORD_58 : 'version';

KEYWORD_52 : 'cached';

KEYWORD_53 : 'greedy';

KEYWORD_54 : 'output';

KEYWORD_55 : 'source';

KEYWORD_50 : 'final';

KEYWORD_51 : 'input';

KEYWORD_45 : 'name';

KEYWORD_46 : 'this';

KEYWORD_47 : 'unit';

KEYWORD_48 : 'when';

KEYWORD_49 : 'with';

KEYWORD_38 : '!==';

KEYWORD_39 : '...';

KEYWORD_40 : '===';

KEYWORD_41 : 'env';

KEYWORD_42 : 'new';

KEYWORD_43 : 'val';

KEYWORD_44 : 'var';

KEYWORD_21 : '!=';

KEYWORD_22 : '%=';

KEYWORD_23 : '&&';

KEYWORD_24 : '*=';

KEYWORD_25 : '++';

KEYWORD_26 : '+=';

KEYWORD_27 : '--';

KEYWORD_28 : '-=';

KEYWORD_29 : '..';

KEYWORD_30 : '/=';

KEYWORD_31 : '<=';

KEYWORD_32 : '==';

KEYWORD_33 : '=>';

KEYWORD_34 : '>=';

KEYWORD_35 : 'as';

KEYWORD_36 : '||';

KEYWORD_37 : '~=';

KEYWORD_1 : '!';

KEYWORD_2 : '%';

KEYWORD_3 : '(';

KEYWORD_4 : ')';

KEYWORD_5 : '*';

KEYWORD_6 : '+';

KEYWORD_7 : ',';

KEYWORD_8 : '-';

KEYWORD_9 : '.';

KEYWORD_10 : '/';

KEYWORD_11 : ':';

KEYWORD_12 : ';';

KEYWORD_13 : '<';

KEYWORD_14 : '=';

KEYWORD_15 : '>';

KEYWORD_16 : '[';

KEYWORD_17 : ']';

KEYWORD_18 : '{';

KEYWORD_19 : '|';

KEYWORD_20 : '}';



RULE_DOCUMENTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



