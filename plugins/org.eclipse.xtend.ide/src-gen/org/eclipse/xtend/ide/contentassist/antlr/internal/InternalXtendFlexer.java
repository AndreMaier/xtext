/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*
* generated by Xtext
*/
package org.eclipse.xtend.ide.contentassist.antlr.internal;

import static org.eclipse.xtend.ide.contentassist.antlr.internal.InternalXtendParser.*;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>../org.eclipse.xtend.ide/src-gen/org/eclipse/xtend/ide/contentassist/antlr/internal/InternalXtendFlexer.flex</tt>
 */
class InternalXtendFlexer implements org.eclipse.xtend.core.parser.InternalFlexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\1\1\2\1\4\1\4\1\3\16\10\4\0\1\1\1\41"+
    "\1\33\1\31\1\7\1\43\1\44\1\32\1\45\1\46\1\16\1\47"+
    "\1\50\1\24\1\52\1\15\1\27\11\14\1\54\1\55\1\53\1\42"+
    "\1\51\1\56\1\57\1\60\1\21\1\13\1\71\1\62\1\26\2\7"+
    "\1\67\2\7\1\65\1\7\1\70\1\64\1\72\1\7\1\63\1\66"+
    "\1\61\3\7\1\30\2\7\1\73\1\11\1\74\1\6\1\17\1\0"+
    "\1\75\1\35\1\101\1\23\1\20\1\36\1\113\1\103\1\22\1\7"+
    "\1\112\1\25\1\105\1\34\1\102\1\104\1\7\1\100\1\76\1\77"+
    "\1\12\1\110\1\111\1\106\1\107\1\114\1\115\1\116\1\117\1\0"+
    "\6\10\1\5\32\10\2\0\4\7\4\0\1\7\1\40\1\0\1\10"+
    "\7\0\1\7\4\0\1\7\1\37\4\0\27\7\1\0\37\7\1\0"+
    "\u013f\7\31\0\162\7\4\0\14\7\16\0\5\7\11\0\1\7\21\0"+
    "\130\10\5\0\23\10\12\0\1\7\13\0\1\7\1\0\3\7\1\0"+
    "\1\7\1\0\24\7\1\0\54\7\1\0\46\7\1\0\5\7\4\0"+
    "\202\7\1\0\4\10\3\0\105\7\1\0\46\7\2\0\2\7\6\0"+
    "\20\7\41\0\46\7\2\0\1\7\7\0\47\7\11\0\21\10\1\0"+
    "\27\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0\1\10\13\0"+
    "\33\7\5\0\3\7\15\0\4\10\14\0\6\10\13\0\32\7\5\0"+
    "\13\7\16\10\7\0\12\10\4\0\2\7\1\10\143\7\1\0\1\7"+
    "\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7"+
    "\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\3\7"+
    "\60\0\46\7\13\10\1\7\u014f\0\3\10\66\7\2\0\1\10\1\7"+
    "\20\10\2\0\1\7\4\10\3\0\12\7\2\10\2\0\12\10\21\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\11\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10"+
    "\4\7\15\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0"+
    "\5\10\4\0\2\10\2\0\3\10\13\0\4\7\1\0\1\7\7\0"+
    "\14\10\3\7\14\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10"+
    "\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0"+
    "\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7"+
    "\6\10\3\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0"+
    "\3\7\4\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7"+
    "\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\3\0\3\7\3\0\10\7\1\0\3\7\4\0\5\10"+
    "\3\0\3\10\1\0\4\10\11\0\1\10\17\0\11\10\11\0\1\7"+
    "\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\4\0\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\11\0\2\7\4\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7"+
    "\4\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\20\7\4\0\6\10\2\0\3\10\1\0\4\10\11\0\1\10"+
    "\10\0\2\7\4\0\12\10\22\0\2\10\1\0\22\7\3\0\30\7"+
    "\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10"+
    "\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7"+
    "\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7"+
    "\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7"+
    "\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7"+
    "\1\0\6\10\2\0\12\10\2\0\2\7\42\0\1\7\27\0\2\10"+
    "\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10"+
    "\10\7\1\0\42\7\6\0\24\10\1\0\2\10\4\7\4\0\10\10"+
    "\1\0\44\10\11\0\1\10\71\0\42\7\1\0\5\7\1\0\2\7"+
    "\1\0\7\10\3\0\4\10\6\0\12\10\6\0\6\7\4\10\106\0"+
    "\46\7\12\0\51\7\7\0\132\7\5\0\104\7\5\0\122\7\6\0"+
    "\7\7\1\0\77\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\47\7\1\0\1\7\1\0\4\7\2\0"+
    "\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\7\7\1\0\7\7\1\0\27\7\1\0\37\7\1\0"+
    "\1\7\1\0\4\7\2\0\7\7\1\0\47\7\1\0\23\7\16\0"+
    "\11\10\56\0\125\7\14\0\u026c\7\2\0\10\7\12\0\32\7\5\0"+
    "\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7"+
    "\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10"+
    "\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10"+
    "\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7\1\10\126\0"+
    "\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7"+
    "\u038b\0\154\7\224\0\234\7\4\0\132\7\6\0\26\7\2\0\6\7"+
    "\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7"+
    "\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7"+
    "\5\0\3\7\1\0\7\7\17\0\4\10\30\0\1\4\1\4\5\10"+
    "\20\0\2\7\23\0\1\7\13\0\4\10\6\0\6\10\1\0\1\7"+
    "\15\0\1\7\40\0\22\7\36\0\15\10\4\0\1\10\3\0\6\10"+
    "\27\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\3\7"+
    "\1\0\7\7\3\0\3\7\5\0\5\7\26\0\44\7\u0e81\0\3\7"+
    "\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0"+
    "\2\10\2\0\3\7\1\0\137\7\5\0\50\7\4\0\136\7\21\0"+
    "\30\7\70\0\20\7\u0200\0\u19b6\7\112\0\u51a6\7\132\0\u048d\7\u0773\0"+
    "\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0\7\7\14\0\5\7\5\0"+
    "\1\7\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0"+
    "\66\7\50\0\15\7\3\0\20\10\20\0\4\10\17\0\2\7\30\0"+
    "\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0"+
    "\1\7\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7\12\0"+
    "\132\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0"+
    "\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\4\3\1\7\1\3\1\4\1\10\2\1\2\3"+
    "\1\11\1\1\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\4\3\1\31\1\32\11\3\1\33\1\34\1\35"+
    "\3\0\1\36\1\37\1\40\1\41\5\3\1\42\3\3"+
    "\1\43\1\44\1\45\1\3\1\46\1\40\1\0\1\47"+
    "\1\40\1\0\1\47\6\3\1\11\1\50\1\0\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\4\3\1\65\2\3\1\66\22\3"+
    "\1\67\1\40\1\36\2\40\1\37\1\0\1\40\7\3"+
    "\1\70\1\3\1\71\1\46\1\72\1\3\1\73\3\3"+
    "\1\74\1\11\1\75\1\0\1\76\1\77\1\100\1\101"+
    "\1\102\15\3\1\103\14\3\1\104\1\105\2\3\2\0"+
    "\1\106\1\0\1\107\1\110\10\3\1\0\1\72\1\111"+
    "\1\112\3\3\1\11\1\75\1\113\1\3\1\114\12\3"+
    "\1\115\5\3\1\116\21\3\1\0\1\46\1\72\1\3"+
    "\1\117\1\120\1\75\1\121\2\3\1\122\3\3\1\123"+
    "\5\3\1\124\2\3\1\125\1\126\7\3\1\127\2\3"+
    "\1\130\3\3\1\131\2\3\1\72\1\132\1\3\1\75"+
    "\1\133\1\134\3\3\1\135\2\3\1\136\1\3\1\137"+
    "\1\140\1\141\1\142\1\3\1\143\4\3\1\144\4\3"+
    "\1\145\1\3\1\146\7\3\1\147\1\150\6\3\1\151"+
    "\2\3\1\152\1\153\2\3\1\154\1\3\1\155\1\156"+
    "\1\3\1\157\1\3\1\160\2\3\1\161\1\162\1\163"+
    "\1\164\1\165\2\3\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\120\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0"+
    "\0\u0730\0\120\0\u0780\0\120\0\120\0\u07d0\0\120\0\u0820"+
    "\0\u0870\0\u08c0\0\u0910\0\120\0\u0960\0\120\0\u09b0\0\u0a00"+
    "\0\u0a50\0\u0aa0\0\120\0\120\0\u0af0\0\u0b40\0\u0b90\0\u0be0"+
    "\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\120\0\u0dc0\0\120"+
    "\0\u0190\0\u0e10\0\u0e60\0\120\0\u0eb0\0\u0f00\0\120\0\u0f50"+
    "\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u0140\0\u10e0\0\u1130\0\u1180"+
    "\0\u0140\0\120\0\120\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310"+
    "\0\u0550\0\u1360\0\120\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0"+
    "\0\u1540\0\u1590\0\120\0\u15e0\0\u1630\0\u1680\0\120\0\120"+
    "\0\120\0\120\0\u16d0\0\u1720\0\120\0\120\0\120\0\120"+
    "\0\u1770\0\u17c0\0\u1810\0\u1860\0\u0140\0\u18b0\0\u1900\0\u0140"+
    "\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80"+
    "\0\u1bd0\0\u1c20\0\u1c70\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00"+
    "\0\u1e50\0\u1ea0\0\120\0\u1ef0\0\u1f40\0\u1f90\0\120\0\120"+
    "\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u2210"+
    "\0\u2260\0\u22b0\0\u2300\0\u0140\0\u2350\0\u23a0\0\u23f0\0\u0140"+
    "\0\u2440\0\u2490\0\u24e0\0\u0140\0\u2530\0\u2580\0\u25d0\0\120"+
    "\0\120\0\120\0\120\0\120\0\u2620\0\u2670\0\u26c0\0\u2710"+
    "\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990"+
    "\0\u29e0\0\u0140\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0"+
    "\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u0140\0\u0140"+
    "\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\120\0\u2030\0\u0140\0\u0140"+
    "\0\u2f30\0\u2f80\0\u2fd0\0\u3020\0\u3070\0\u30c0\0\u3110\0\u3160"+
    "\0\u31b0\0\u3200\0\120\0\u0140\0\u3250\0\u32a0\0\u32f0\0\120"+
    "\0\u3340\0\120\0\u3390\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520"+
    "\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u0140\0\u3750"+
    "\0\u37a0\0\u37f0\0\u3840\0\u3890\0\u0140\0\u38e0\0\u3930\0\u3980"+
    "\0\u39d0\0\u3a20\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00"+
    "\0\u3c50\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\120"+
    "\0\u3e80\0\u3ed0\0\u3f20\0\u0140\0\u3f70\0\u0140\0\u3fc0\0\u4010"+
    "\0\u0140\0\u4060\0\u40b0\0\u4100\0\u0140\0\u4150\0\u41a0\0\u41f0"+
    "\0\u4240\0\u4290\0\u42e0\0\u4330\0\u4380\0\u0140\0\u0140\0\u43d0"+
    "\0\u4420\0\u4470\0\u44c0\0\u4510\0\u4560\0\u45b0\0\u0140\0\u4600"+
    "\0\u4650\0\u0140\0\u46a0\0\u46f0\0\u4740\0\u0140\0\u4790\0\u47e0"+
    "\0\120\0\u0140\0\u4830\0\120\0\u0140\0\u0140\0\u4880\0\u48d0"+
    "\0\u4920\0\u0140\0\u4970\0\u49c0\0\u0140\0\u4a10\0\u0140\0\u0140"+
    "\0\u0140\0\u0140\0\u4a60\0\u0140\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0"+
    "\0\u0140\0\u4bf0\0\u4c40\0\u4c90\0\u4ce0\0\u0140\0\u4d30\0\u0140"+
    "\0\u4d80\0\u4dd0\0\u4e20\0\u4e70\0\u4ec0\0\u4f10\0\u4f60\0\u0140"+
    "\0\u0140\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140\0\u0140"+
    "\0\u5190\0\u51e0\0\u0140\0\u0140\0\u5230\0\u5280\0\u0140\0\u52d0"+
    "\0\u0140\0\u0140\0\u5320\0\u0140\0\u5370\0\u0140\0\u53c0\0\u5410"+
    "\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u5460\0\u54b0\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\2\0\1\4\1\5\1\2\1\6\2\5"+
    "\1\7\1\10\1\11\1\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\5\1\17\1\20\1\5\1\21\1\22\1\23"+
    "\1\24\1\5\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\5\1\50\3\5"+
    "\1\51\1\52\3\5\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\5\1\63\3\5\1\64\1\65"+
    "\3\5\1\66\1\67\1\70\121\0\3\3\123\0\1\5"+
    "\1\0\1\71\2\5\3\0\5\5\1\0\2\5\1\0"+
    "\1\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\20\5\15\0"+
    "\1\5\121\0\1\7\2\0\1\7\1\72\1\73\1\0"+
    "\1\74\1\0\2\74\1\7\5\0\1\73\1\74\23\0"+
    "\1\72\2\0\1\74\3\0\1\74\43\0\1\75\1\76"+
    "\117\0\1\77\106\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\1\100\3\5\3\0\1\101\2\5"+
    "\21\0\13\5\2\0\11\5\1\102\6\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\2\5\1\103\10\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\1\104\1\5\1\105\21\0\13\5"+
    "\2\0\10\5\1\106\7\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\1\5\1\107\1\5\1\110\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\5\5"+
    "\1\111\12\5\45\0\1\112\6\0\1\113\53\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\4\5\1\114\6\5\2\0\20\5"+
    "\17\0\1\7\2\0\1\7\1\72\1\73\1\0\1\74"+
    "\1\0\2\74\1\7\1\115\4\0\1\73\1\74\23\0"+
    "\1\72\2\0\1\74\3\0\1\74\14\0\1\115\11\0"+
    "\11\116\1\117\20\116\1\120\65\116\11\121\1\122\21\121"+
    "\1\123\64\121\5\0\1\5\1\0\2\5\1\71\1\124"+
    "\2\5\2\0\1\5\1\125\3\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\1\126\17\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\3\5\1\127\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\130"+
    "\4\5\1\131\12\5\3\0\32\26\1\132\5\26\1\133"+
    "\57\26\40\0\1\134\121\0\1\135\117\0\1\136\6\0"+
    "\1\137\112\0\1\140\115\0\1\141\117\0\1\142\127\0"+
    "\1\143\107\0\1\144\6\0\1\145\122\0\1\146\115\0"+
    "\1\147\1\0\1\150\50\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\1\5\1\151\2\5\3\0"+
    "\3\5\21\0\13\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\5\5\1\152\2\5\1\153\2\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\2\5\1\154"+
    "\10\5\2\0\20\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\1\5\1\155\2\5\3\0"+
    "\3\5\21\0\13\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\1\156\1\157\1\5\21\0\13\5\2\0\1\5\1\160"+
    "\16\5\10\0\1\5\1\0\2\5\1\71\1\161\2\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\2\5\1\162\7\5\1\163\1\5\1\164\3\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\3\5"+
    "\1\165\2\5\1\166\3\5\1\167\5\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\1\5\1\170\3\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\1\171\3\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\172\2\5\1\173\14\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\13\5\1\174\4\5\10\0\1\5"+
    "\1\0\2\5\1\71\1\175\2\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\1\176\2\5"+
    "\1\177\14\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\200\4\5\1\201\12\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\6\5\1\202\11\5\121\0"+
    "\1\203\1\0\14\204\1\205\7\204\1\206\2\204\1\205"+
    "\17\204\1\206\50\204\22\207\2\74\43\207\1\74\1\207"+
    "\1\74\26\207\2\75\1\210\1\211\114\75\16\76\1\212"+
    "\101\76\5\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\5\1\213\16\5\10\0\1\5\1\0\2\5\1\71"+
    "\1\214\2\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\2\5\1\215\15\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\1\5"+
    "\1\216\2\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\5"+
    "\1\217\1\220\15\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\7\5\1\221\10\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\2\5\1\222\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\1\5\1\223\16\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\3\5\1\224\7\5"+
    "\2\0\20\5\16\0\2\225\2\0\3\225\1\0\1\225"+
    "\2\0\2\225\5\0\2\225\21\0\1\225\1\0\1\225"+
    "\6\0\1\225\3\0\1\225\3\0\1\225\16\0\11\116"+
    "\1\117\20\116\1\123\65\116\11\0\2\116\17\0\5\116"+
    "\40\0\2\116\51\0\1\226\76\0\2\121\17\0\5\121"+
    "\40\0\2\121\24\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\1\227\3\5\3\0\3\5\21\0"+
    "\13\5\2\0\20\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\14\5\1\230\3\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\2\5\1\231\15\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\1\232\2\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\1\233\3\5\3\0\3\5\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\3\5\1\234\14\5\3\0\32\26\1\235\5\26\1\133"+
    "\57\26\2\134\1\236\1\237\114\134\42\0\1\240\117\0"+
    "\1\241\127\0\1\242\1\243\115\0\1\244\53\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\1\5\1\245\11\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\6\5\1\246\4\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\11\5"+
    "\1\247\1\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\12\5\1\250\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\1\251\2\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\1\5\1\252\16\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\7\5"+
    "\1\253\10\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\254\2\5\1\255\14\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\1\256\2\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\3\5\1\257\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\1\260\2\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\261\11\5\1\262\5\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\3\5\1\263\14\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\7\5\1\264\10\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\2\5"+
    "\1\265\15\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\266\17\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\1\5\1\267\1\270\15\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\1\5\1\271\3\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\1\5"+
    "\1\272\3\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\1\5\1\273\1\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\4\5\1\274\13\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\3\5\1\275\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\5\5"+
    "\1\276\12\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\1\277\3\5\3\0\3\5\21\0"+
    "\13\5\2\0\3\5\1\300\14\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\1\301\3\5"+
    "\3\0\3\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\3\5\1\302\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\24\0\1\303\13\0\1\303\76\0\1\205\2\0\1\205"+
    "\1\0\1\304\1\0\1\74\1\0\2\74\1\205\5\0"+
    "\1\304\1\74\26\0\1\74\3\0\1\74\42\0\1\205"+
    "\4\0\1\303\5\0\1\205\5\0\1\303\64\0\1\210"+
    "\115\0\15\76\1\305\1\306\101\76\5\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\1\5\1\307\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\10\5\1\310"+
    "\7\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\1\5\1\311\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\20\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\4\5\1\312\6\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\2\5\1\313\15\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\1\5\1\314"+
    "\3\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\1\315\3\5\3\0\3\5\21\0\13\5"+
    "\2\0\5\5\1\316\12\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\1\317\17\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\7\5\1\320\10\5\16\0"+
    "\2\225\2\0\3\225\1\0\1\225\2\0\2\225\1\0"+
    "\1\321\3\0\2\225\21\0\1\225\1\0\1\225\6\0"+
    "\1\225\3\0\1\225\3\0\1\225\16\0\32\226\1\322"+
    "\5\226\1\323\57\226\5\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\1\324\3\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\3\5\1\325\1\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\1\326\17\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\1\5\1\327"+
    "\16\5\3\0\32\26\1\330\5\26\1\133\57\26\32\236"+
    "\1\331\5\236\1\332\57\236\2\0\1\236\122\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\2\5\1\333\10\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\2\5\1\334\10\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\1\5\1\335\2\5\3\0\3\5"+
    "\21\0\7\5\1\336\3\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\1\337\12\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\5\5\1\340"+
    "\12\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\341\15\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\1\5\1\342\3\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\2\5\1\343\15\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\3\5\1\344"+
    "\1\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\4\5\1\345\13\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\2\5\1\346\15\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\1\5\1\347\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\1\350\2\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\5\5"+
    "\1\351\12\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\1\5\1\352\3\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\1\353\2\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\1\5\1\354\16\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\1\5\1\355"+
    "\3\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\4\5\1\356\13\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\1\357\17\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\3\5\1\360\14\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\1\361"+
    "\3\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\15\5\1\362"+
    "\2\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\13\5\1\363\4\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\2\5\1\364\15\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\1\365\17\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\1\366"+
    "\3\5\3\0\3\5\21\0\13\5\2\0\20\5\3\0"+
    "\22\207\2\0\43\207\1\0\1\207\1\0\26\207\22\0"+
    "\2\74\43\0\1\74\1\0\1\74\33\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\1\367\2\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\3\5\1\370\7\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\371"+
    "\17\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\3\5\1\372\14\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\1\5\1\373\3\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\3\5\1\374\14\5\10\0"+
    "\1\5\1\0\2\5\1\71\1\375\2\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\376"+
    "\17\5\24\0\1\377\3\0\1\u0100\7\0\1\377\27\0"+
    "\1\u0100\32\0\32\226\1\u0101\5\226\1\323\57\226\5\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\13\5\1\u0102"+
    "\4\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\1\u0103\3\5\3\0\3\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\1\5\1\u0104\3\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\3\0\32\236\1\u0105\5\236"+
    "\1\332\57\236\5\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\3\5"+
    "\1\u0106\7\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\7\5\1\u0107\3\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\4\5\1\u0108\6\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\1\5\1\u0109\2\5\3\0\3\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\3\5"+
    "\1\u010a\7\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\2\5\1\u010b\15\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\3\5\1\u010c\14\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\3\5"+
    "\1\u010d\14\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\3\5\1\u010e\1\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\4\5\1\u010f\13\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\6\5\1\u0110\11\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\4\5"+
    "\1\u0111\13\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\5\1\u0112\16\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\14\5\1\u0113\3\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\5\5\1\u0114\12\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\3\5"+
    "\1\u0115\14\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\5\1\u0116\16\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\6\5\1\u0117\11\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\2\5\1\u0118\15\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\3\5"+
    "\1\u0119\14\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\3\5\1\u011a\1\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\1\u011b\17\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\1\u011c\17\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\1\5\1\u011d\3\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\2\5"+
    "\1\u011e\15\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\1\5\1\u011f\3\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\4\5\1\u0120\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\1\5\1\u0121\16\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\2\5\1\u0122\10\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\1\u0123\2\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\2\5\1\u0124\21\0"+
    "\13\5\2\0\20\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\10\5\1\u0125\7\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\2\5\1\u0126\15\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\1\u0127\3\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\2\5"+
    "\1\u0128\15\5\25\0\1\u0100\44\0\1\u0100\30\0\32\226"+
    "\1\u0129\5\226\1\323\57\226\5\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\1\5\1\u012a\3\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\1\u012b"+
    "\3\5\3\0\3\5\21\0\13\5\2\0\20\5\3\0"+
    "\32\236\1\u012c\5\236\1\332\57\236\5\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\1\5\1\u012d"+
    "\2\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\3\5\1\u012e\7\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\1\u012f\12\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\u0130\17\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\1\u0131\17\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\4\5\1\u0132\13\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\2\5\1\u0133\15\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\3\5"+
    "\1\u0134\14\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\6\5\1\u0135\11\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\3\5\1\u0136\1\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\1\5\1\u0137\16\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\2\5\1\u0138\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\1\u0139\2\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\1\5\1\u013a\3\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\3\5\1\u013b\1\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\4\5\1\u013c\13\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\16\5"+
    "\1\u013d\1\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\2\5\1\u013e\15\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\4\5\1\u013f\13\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\3\5\1\u0140\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\5"+
    "\1\u0141\16\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\3\5\1\u0142\1\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\4\5\1\u0143\13\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\1\u0144\17\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\1\5\1\u0145"+
    "\3\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\u0146\15\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\4\5\1\u0147\13\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\12\5\1\u0148\5\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\1\5\1\u0149\11\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\u014a\15\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\4\5\1\u014b\13\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\5\5\1\0\4\5\3\0"+
    "\2\5\1\u014c\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\5\5\1\u014d\12\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\1\5"+
    "\1\u014e\3\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\4\5\1\u014f\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\20\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\1\5\1\u0150\3\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\1\5\1\u0151\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\2\5\1\u0152"+
    "\15\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\1\u0153\3\5\3\0\3\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\5\5\1\u0154\12\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\1\5\1\u0155\3\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\20\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\4\5\1\u0156\13\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\1\u0157\2\5\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\6\5\1\u0158\11\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\4\5\1\u0159\6\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\3\5\1\u015a\1\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\2\5\1\u015b"+
    "\15\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\7\5\1\u015c\10\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\1\u015d\2\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\1\u015e"+
    "\2\5\21\0\13\5\2\0\20\5\10\0\1\5\1\0"+
    "\2\5\1\71\3\5\2\0\1\5\1\u015f\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\1\5\1\u0160"+
    "\3\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\20\5\10\0\1\5\1\0\2\5\1\71\3\5\2\0"+
    "\1\5\1\u0161\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\20\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\1\u0162\2\5"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\5\5\1\u0163\12\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\1\5\1\u0164\3\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\2\5"+
    "\1\u0165\15\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\5\5\1\0\4\5\3\0\3\5\21\0\3\5"+
    "\1\u0166\7\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\5\5\1\u0167\12\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\3\5\1\u0168\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\20\5"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\2\5"+
    "\1\u0169\15\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\4\5\1\u016a\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\20\5\10\0\1\5\1\0\2\5\1\71"+
    "\3\5\2\0\5\5\1\0\4\5\3\0\2\5\1\u016b"+
    "\21\0\13\5\2\0\20\5\10\0\1\5\1\0\2\5"+
    "\1\71\3\5\2\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\1\5\1\u016c\16\5\10\0\1\5"+
    "\1\0\2\5\1\71\3\5\2\0\5\5\1\0\4\5"+
    "\3\0\1\u016d\2\5\21\0\13\5\2\0\20\5\10\0"+
    "\1\5\1\0\2\5\1\71\3\5\2\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\17\5\1\u016e"+
    "\10\0\1\5\1\0\2\5\1\71\3\5\2\0\1\5"+
    "\1\u016f\3\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\20\5\10\0\1\5\1\0\2\5\1\71\3\5"+
    "\2\0\4\5\1\u0170\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\20\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\10\1\1\11\1\1\2\11"+
    "\1\1\1\11\4\1\1\11\1\1\1\11\4\1\2\11"+
    "\11\1\1\11\1\1\1\11\3\0\1\11\2\1\1\11"+
    "\12\1\2\11\3\1\1\0\2\1\1\0\1\11\7\1"+
    "\1\11\1\0\2\1\4\11\2\1\4\11\32\1\1\11"+
    "\3\1\2\11\1\0\25\1\1\0\5\11\36\1\2\0"+
    "\1\11\1\0\12\1\1\0\1\1\1\11\4\1\1\11"+
    "\1\1\1\11\44\1\1\0\1\11\50\1\1\11\2\1"+
    "\1\11\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public InternalXtendFlexer() {
    this(null);
  }

  public int getTokenLength() {
    return yylength();
  }
  
  public String getTokenText() {
    return yytext();
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  InternalXtendFlexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1812) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return RULE_ANY_OTHER;
          }
        case 119: break;
        case 2: 
          { return RULE_WS;
          }
        case 120: break;
        case 3: 
          { return RULE_ID;
          }
        case 121: break;
        case 4: 
          { return RULE_INT;
          }
        case 122: break;
        case 5: 
          { return KW_Solidus;
          }
        case 123: break;
        case 6: 
          { return KW_Asterisk;
          }
        case 124: break;
        case 7: 
          { return KW_HyphenMinus;
          }
        case 125: break;
        case 8: 
          { return KW_NumberSign;
          }
        case 126: break;
        case 9: 
          { return RULE_RICH_TEXT_END;
          }
        case 127: break;
        case 10: 
          { return KW_ExclamationMark;
          }
        case 128: break;
        case 11: 
          { return KW_EqualsSign;
          }
        case 129: break;
        case 12: 
          { return KW_PercentSign;
          }
        case 130: break;
        case 13: 
          { return KW_Ampersand;
          }
        case 131: break;
        case 14: 
          { return KW_LeftParenthesis;
          }
        case 132: break;
        case 15: 
          { return KW_RightParenthesis;
          }
        case 133: break;
        case 16: 
          { return KW_PlusSign;
          }
        case 134: break;
        case 17: 
          { return KW_Comma;
          }
        case 135: break;
        case 18: 
          { return KW_GreaterThanSign;
          }
        case 136: break;
        case 19: 
          { return KW_FullStop;
          }
        case 137: break;
        case 20: 
          { return KW_LessThanSign;
          }
        case 138: break;
        case 21: 
          { return KW_Colon;
          }
        case 139: break;
        case 22: 
          { return KW_Semicolon;
          }
        case 140: break;
        case 23: 
          { return KW_QuestionMark;
          }
        case 141: break;
        case 24: 
          { return KW_CommercialAt;
          }
        case 142: break;
        case 25: 
          { return KW_LeftSquareBracket;
          }
        case 143: break;
        case 26: 
          { return KW_RightSquareBracket;
          }
        case 144: break;
        case 27: 
          { return KW_LeftCurlyBracket;
          }
        case 145: break;
        case 28: 
          { return KW_VerticalLine;
          }
        case 146: break;
        case 29: 
          { return KW_RightCurlyBracket;
          }
        case 147: break;
        case 30: 
          { return RULE_DECIMAL;
          }
        case 148: break;
        case 31: 
          { return RULE_SL_COMMENT;
          }
        case 149: break;
        case 32: 
          { return 0; /* antlr <invalid> */
          }
        case 150: break;
        case 33: 
          { return KW_AsteriskAsterisk;
          }
        case 151: break;
        case 34: 
          { return KW_If;
          }
        case 152: break;
        case 35: 
          { return KW_Do;
          }
        case 153: break;
        case 36: 
          { return KW_HyphenMinusEqualsSign;
          }
        case 154: break;
        case 37: 
          { return KW_HyphenMinusGreaterThanSign;
          }
        case 155: break;
        case 38: 
          { return RULE_HEX;
          }
        case 156: break;
        case 39: 
          { return RULE_STRING;
          }
        case 157: break;
        case 40: 
          { return RULE_RICH_TEXT_INBETWEEN;
          }
        case 158: break;
        case 41: 
          { return KW_ExclamationMarkEqualsSign;
          }
        case 159: break;
        case 42: 
          { return KW_EqualsSignEqualsSign;
          }
        case 160: break;
        case 43: 
          { return KW_EqualsSignGreaterThanSign;
          }
        case 161: break;
        case 44: 
          { return KW_AmpersandAmpersand;
          }
        case 162: break;
        case 45: 
          { return KW_PlusSignEqualsSign;
          }
        case 163: break;
        case 46: 
          { return KW_GreaterThanSignEqualsSign;
          }
        case 164: break;
        case 47: 
          { return KW_FullStopFullStop;
          }
        case 165: break;
        case 48: 
          { return KW_LessThanSignEqualsSign;
          }
        case 166: break;
        case 49: 
          { return KW_LessThanSignGreaterThanSign;
          }
        case 167: break;
        case 50: 
          { return KW_ColonColon;
          }
        case 168: break;
        case 51: 
          { return KW_QuestionMarkFullStop;
          }
        case 169: break;
        case 52: 
          { return KW_QuestionMarkColon;
          }
        case 170: break;
        case 53: 
          { return KW_IF;
          }
        case 171: break;
        case 54: 
          { return KW_As;
          }
        case 172: break;
        case 55: 
          { return KW_VerticalLineVerticalLine;
          }
        case 173: break;
        case 56: 
          { return KW_Def;
          }
        case 174: break;
        case 57: 
          { return KW_FOR;
          }
        case 175: break;
        case 58: 
          { return RULE_RICH_TEXT;
          }
        case 176: break;
        case 59: 
          { return KW_New;
          }
        case 177: break;
        case 60: 
          { return KW_For;
          }
        case 178: break;
        case 61: 
          { return RULE_COMMENT_RICH_TEXT_END;
          }
        case 179: break;
        case 62: 
          { return KW_ExclamationMarkEqualsSignEqualsSign;
          }
        case 180: break;
        case 63: 
          { return KW_EqualsSignEqualsSignEqualsSign;
          }
        case 181: break;
        case 64: 
          { return KW_FullStopFullStopFullStop;
          }
        case 182: break;
        case 65: 
          { return KW_FullStopFullStopLessThanSign;
          }
        case 183: break;
        case 66: 
          { return KW_LessThanSignEqualsSignGreaterThanSign;
          }
        case 184: break;
        case 67: 
          { return KW_Try;
          }
        case 185: break;
        case 68: 
          { return KW_Val;
          }
        case 186: break;
        case 69: 
          { return KW_Var;
          }
        case 187: break;
        case 70: 
          { return RULE_ML_COMMENT;
          }
        case 188: break;
        case 71: 
          { return KW_Else;
          }
        case 189: break;
        case 72: 
          { return KW_Enum;
          }
        case 190: break;
        case 73: 
          { return RULE_RICH_TEXT_START;
          }
        case 191: break;
        case 74: 
          { return KW_Null;
          }
        case 192: break;
        case 75: 
          { return RULE_COMMENT_RICH_TEXT_INBETWEEN;
          }
        case 193: break;
        case 76: 
          { return KW_ELSE;
          }
        case 194: break;
        case 77: 
          { return KW_True;
          }
        case 195: break;
        case 78: 
          { return KW_Case;
          }
        case 196: break;
        case 79: 
          { return KW_Final;
          }
        case 197: break;
        case 80: 
          { return KW_False;
          }
        case 198: break;
        case 81: 
          { return KW_AFTER;
          }
        case 199: break;
        case 82: 
          { return KW_ENDIF;
          }
        case 200: break;
        case 83: 
          { return KW_Super;
          }
        case 201: break;
        case 84: 
          { return KW_Throw;
          }
        case 202: break;
        case 85: 
          { return KW_Class;
          }
        case 203: break;
        case 86: 
          { return KW_Catch;
          }
        case 204: break;
        case 87: 
          { return KW_While;
          }
        case 205: break;
        case 88: 
          { return KW_BEFORE;
          }
        case 206: break;
        case 89: 
          { return KW_Import;
          }
        case 207: break;
        case 90: 
          { return KW_Native;
          }
        case 208: break;
        case 91: 
          { return KW_ELSEIF;
          }
        case 209: break;
        case 92: 
          { return KW_ENDFOR;
          }
        case 210: break;
        case 93: 
          { return KW_Static;
          }
        case 211: break;
        case 94: 
          { return KW_Switch;
          }
        case 212: break;
        case 95: 
          { return KW_Throws;
          }
        case 213: break;
        case 96: 
          { return KW_Typeof;
          }
        case 214: break;
        case 97: 
          { return KW_Return;
          }
        case 215: break;
        case 98: 
          { return KW_Create;
          }
        case 216: break;
        case 99: 
          { return KW_Public;
          }
        case 217: break;
        case 100: 
          { return KW_Extends;
          }
        case 218: break;
        case 101: 
          { return KW_Default;
          }
        case 219: break;
        case 102: 
          { return KW_Finally;
          }
        case 220: break;
        case 103: 
          { return KW_Package;
          }
        case 221: break;
        case 104: 
          { return KW_Private;
          }
        case 222: break;
        case 105: 
          { return KW_Dispatch;
          }
        case 223: break;
        case 106: 
          { return KW_Abstract;
          }
        case 224: break;
        case 107: 
          { return KW_Strictfp;
          }
        case 225: break;
        case 108: 
          { return KW_Override;
          }
        case 226: break;
        case 109: 
          { return KW_Volatile;
          }
        case 227: break;
        case 110: 
          { return KW_Extension;
          }
        case 228: break;
        case 111: 
          { return KW_Interface;
          }
        case 229: break;
        case 112: 
          { return KW_SEPARATOR;
          }
        case 230: break;
        case 113: 
          { return KW_Transient;
          }
        case 231: break;
        case 114: 
          { return KW_Protected;
          }
        case 232: break;
        case 115: 
          { return KW_Instanceof;
          }
        case 233: break;
        case 116: 
          { return KW_Implements;
          }
        case 234: break;
        case 117: 
          { return KW_Annotation;
          }
        case 235: break;
        case 118: 
          { return KW_Synchronized;
          }
        case 236: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
