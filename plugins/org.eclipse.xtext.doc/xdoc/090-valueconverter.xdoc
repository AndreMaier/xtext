section:valueconverter[Value Converter]

Value converters are registered to convert the parsed text into a certain data type instance and vice versa.
The primary hook is called codeRef[org.eclipse.xtext.conversion.IValueConverterService] 
and the concrete implementation can be registered via the runtime ref:guicemodules[Guice module].
To do so override the corresponding binding in your runtime module like shown in this example:

code[Java][@Override
public Class<? extends IValueConverterService> 
		bindIValueConverterService() {
  	return MySpecialValueConverterService.class;
}
]

section2[Annotation-Based Value Converters]

The most simple way to register additional value converters is to make use of 
codeRef[org.eclipse.xtext.conversion.impl.AbstractDeclarativeValueConverterService], 
which allows to declaratively register an codeRef[org.eclipse.xtext.conversion.IValueConverter]
by means of an annotated method. 

If you use the common terminals grammar e[org.eclipse.xtext.common.Terminals] you should subclass 
codeRef[org.eclipse.xtext.common.services.DefaultTerminalConverters] and override or 
add additional value converters by adding the respective methods. In addition to the explicitly 
defined converters in the default implementation, a delegating converter is registered for each 
available e[EDataType] that reuses the functionality of the corresponding EMF e[EFactory].

As qualified names - i.e. names composed of namespaces separated by a delimiter - are expected to occur often, we've added a codeRef[org.eclipse.xtext.conversion.impl.QualifiedNameValueConverter]. This one removes comments and whitespaces and delegates to another value converter for each segment, allowing individually quoted segments. The domainmodel example shows how to use it. 

The protocol of an e[IValueConverter] allows to throw a e[ValueConverterException] if something went wrong.
The exception is propagated as a syntax error by the parser or as a validation problem by the 
e[ConcreteSyntaxValidator] if the value cannot be converted to a valid string. The 
codeRef[org.eclipse.xtext.conversion.impl.AbstractLexerBasedConverter] is useful when 
implementing a custom value converter. If the converter needs to know about the rule that it currently 
works with, it may implement the interface e[IValueConverter.RuleSpecific]. The framework will set the
rule such as the implementation may use it afterwards.