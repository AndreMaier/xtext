/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtext.xtend2.Xtend2 with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "platform:/resource/org.eclipse.xtext.xtend2/model/Xtend2.ecore"
import "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore" as xbase
import "platform:/resource/org.eclipse.xtext.xbase/model/Xtype.ecore" as xtype
import "platform:/resource/org.eclipse.xtext.xbase/model/XAnnotations.ecore" as annotations
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types

File returns XtendFile : 
    ('package' package=QualifiedName)?
	(imports+=Import)*
	(xtendClass=Class)?
;

Import returns XtendImport : 
	'import' (static?='static' extension?='extension'?)? importedNamespace=QualifiedNameWithWildCard
;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;
	
Class returns XtendClass :
   annotations+=XAnnotation* 
   "class" name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
   ("extends" extends=JvmTypeReference)? ('implements' implements+=JvmTypeReference (',' implements+=JvmTypeReference)*)?'{'
	   (members+=Member)*
   '}';

Member returns XtendMember:
	{XtendMember} annotations+=XAnnotation* 
	(
		{XtendField.annotationInfo = current}	
		(extension?='extension')? type=JvmTypeReference name=ValidID
		
	|	{XtendFunction.annotationInfo = current}
		('def' | override?='override') (dispatch?='dispatch'?) ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		returnType=JvmTypeReference? createExtensionInfo=CreateExtensionInfo? name=ValidID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			(expression=XBlockExpression | expression=RichString )?
	) ;

CreateExtensionInfo:
	'create' name=ValidID ':' createExpression=XExpression
;

ValidID:
	ID | 'create'
;


Parameter returns XtendParameter:
	annotations+=XAnnotation* 
	parameterType=JvmTypeReference name=ValidID;
		
XStringLiteral returns xbase::XExpression:
	SimpleStringLiteral | RichString
;

SimpleStringLiteral returns xbase::XExpression:
	{xbase::XStringLiteral} value=STRING
;
		
RichString returns xbase::XExpression:
	{RichString} ( 
	  expressions+=RichStringLiteral |
	  expressions+=RichStringLiteralStart expressions+=RichStringPart 
	  	(expressions+=RichStringLiteralInbetween expressions+=RichStringPart)* 
	  expressions+=RichStringLiteralEnd
	)
;

RichStringLiteral returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT
;

RichStringLiteralStart returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_START
; 

RichStringLiteralInbetween returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_INBETWEEN
; 

RichStringLiteralEnd returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_END
; 

InternalRichString returns xbase::XExpression:
	{RichString} (
		expressions+=InternalRichStringLiteral |
		expressions+=RichStringLiteralInbetween (expressions+=RichStringPart expressions+=RichStringLiteralInbetween)+
	)
;

InternalRichStringLiteral returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_INBETWEEN
;

RichStringPart returns xbase::XExpression:
	XExpressionInsideBlock |
	RichStringForLoop |
	RichStringIf
;

RichStringForLoop returns xbase::XExpression:
	{RichStringForLoop}
	"FOR" declaredParam=JvmFormalParameter ':' forExpression=XExpression
		("BEFORE" before=XExpression)?
		("SEPARATOR" separator=XExpression)?
		("AFTER" after=XExpression)?
		eachExpression=InternalRichString
	"ENDFOR"
;

RichStringIf returns xbase::XExpression :
	{RichStringIf}
	"IF" if=XExpression
		then=InternalRichString
		elseIfs+=RichStringElseIf*
	("ELSE" 
		else=InternalRichString)?
	"ENDIF"
;

RichStringElseIf returns RichStringElseIf:
	"ELSEIF" if=XExpression then=InternalRichString
;

terminal RICH_TEXT : "'''" IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF);
terminal RICH_TEXT_START : "'''" IN_RICH_STRING* ("'" "'"?)? '«';
terminal RICH_TEXT_END : '»' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF) ;
terminal RICH_TEXT_INBETWEEN : '»' IN_RICH_STRING* ("'" "'"?)? '«'; 

terminal fragment IN_RICH_STRING : 
	  "''" !('«'|"'") 
	| "'" !('«'|"'")
	| !('«'|"'");

