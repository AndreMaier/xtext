chapter:Xtend_Expressions[Expressions]

The most important part of a function is of course its implementation, which in Xtend is either a single
ref:Xbase_Expressions_Blocks[block expression] or a ref:Xtend_RichStrings[rich string expression]. 

section-ref[Xbase_Expressions_Blocks]

section-ref[Xbase_Expressions_Literals]

section-ref[Xbase_Expressions_Operators]

section-ref[Xbase_Expressions_FeatureCalls]

section-ref[Xbase_Expressions_ConstructorCall]

section-ref[Xbase_Expressions_IfExpression]

section-ref[Xbase_Expressions_ForLoop]

section-ref[Xbase_Expressions_WhileExpression]

section-ref[Xbase_Expressions_DoWhileExpression]

section-ref[Xbase_Expressions_VariableDeclaration]

section-ref[Xbase_Expressions_Closures]

section-ref[Xbase_Expressions_SwitchExpression]

section-ref[Xbase_Expressions_TypeCasts]

section:Xtend_RichStrings[Rich Strings]

Rich Strings allow for readable string concatenation, which is the main thing you do when writing a code generator. 
Let's have a look at an example of how a typical function with template expressions looks like:

code[Xtend][
toClass(Entity e) '''
  package «e.packageName»;

  «placeImports»

  public class «e.name» «IF e.extends!=null»extends «e.extends»«ENDIF» {
    «FOREACH e.members»
      «member.toMember»
    «ENDFOREACH»
  }
'''
]

If you are familiar with Xpand, you'll notice that it is exactly the same syntax. The difference is, that
the template syntax is actually an expression, which means it can occur everywhere where an expression is
expected. For instance in conjunction the powerful switch expression from Xbase:

code[Xtend][
toMember(Member m) {
	switch m {
		Field : '''private «m.type» «m.name» ;'''
		Method case isAbstract : ''' abstract «...'''
		Method : ''' ..... '''
	}
}
]

section2:RichStringIF[Conditions in Rich Strings]

There is a special code[Xtend][IF] to be used within rich strings which is identical in syntax and meaning to the
old code[Xtend][IF] from Xpand. Note that you could also use the if expression, but since it has not an explicit
terminal token, it is not as readable in that context.

section2:RichStringFOREACH[Loops in Rich Strings]

Also the code[Xtend][FOR] statement is available and can only be used in the context of a rich string.
It also supports the code[Xtend][SEPARATOR] from Xpand. In addition, a code[Xtend][BEFORE] expression
can be defined that is only evaluated if the loop is at least evaluated once before the very first iteration.
Consequently code[Xtend][AFTER] is evaluated after the last iteration if there is any element.

section2:RichStringType[Typing]

The rich string is translated to an efficient string concatenation and the return type of a rich string
is codeRef[java.lang.CharSequence] which allows room for efficient implementation.

section2:WhitespaceHandling[White Space Handling]

One of the key features of rich strings is the smart handling of white space in the template output. The
white space is not written into the output data structure as is but preprocessed. This allows for readable
templates as well as nicely formatted output. This can be achieved by applying three simple rules
when the rich string is evaluated.

ol[
	item[
		An evaluated rich string as part of another string will be prefixed with the current indentation
		of the caller before it is inserted into the result.
	]
	item[
		Indentation in the template that is relative to a control structure will not be propagated to
		the output string. A control structure is a code[Xtend][FOR]-loop or a condition (code[Xtend][IF]) as well
		as the opening and closing marks of the rich string itself.
		
		The indentation is considered to be relative to such a control structure if the previous line
		ends with a control structure followed by optional white space. The amount of white space is not
		taken into account but the delta to the other lines.
	]
	item[
		Lines that do not contain any static text which is not white space but do contain control structures
		or invocations of other templates which evaluate to an empty string, will not appear in the output.
	]		
]

The behavior is best described with a set of examples. The following table assumes a data structure of
nested nodes.

table[
	tr[
		td[
			code[Xtend][
class Template {
	print(Node n) '''
		node «n.name» {}
	'''
}
			]
		]
		td[
			code[
				node NodeName{}
			]
		]
	]
]

The indentation before code[node «n.name»] will be skipped as it is relative to the opening
mark of the rich string and thereby not considered to be relevant for the output but only
for readability of the template itself.

table[
	tr[
		td[
			code[Xtend][
class Template {
	print(Node n) '''
		node «n.name» {
			«IF hasChildren»
				«n.children*.print»
			«ENDIF»
		}
	'''
}
			]
		]
		td[
			code[
node Parent{
	node FirstChild {
	}
	node SecondChild {
		node Leaf {
		}
	}
}
			]
		]
	]
]

As in the previous example, there is no indentation on the root level for the same reason.
The first nesting level has only one indentation level in the output. This is derived from
the indentation of the code[Xtend][IF hasChildren] condition in the template which is nested in
the node. The additional nesting of the recursive invocation code[Xtend][children*.print] is not
visible in the output as it is relative the the surrounding control structure. The line with
code[Xtend][IF] and code[Xtend][ENDIF] contain only control structures thus they are skipped in the output.
Note the additional indentation of the node e[Leaf] which happens due to the first rule:
Indentation is propagated to called templates.

section-ref[Xbase_Expressions_Return]

section-ref[Xbase_Expressions_Throw]

section-ref[Xbase_Expressions_TryCatch]

